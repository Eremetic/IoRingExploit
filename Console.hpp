#pragma once
#include "Xorstr.hpp"

#include <Windows.h>
#include <cstdint>
#include <string>
#include <format>
#include <iostream>
#include <mutex>
#include <sstream>



class DYE
{
private:
	HANDLE hConsole = nullptr;
	DWORD oldConsoleMode = NULL;
public:
	::DYE()
	{
		this->hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
		GetConsoleMode(this->hConsole, &this->oldConsoleMode);
		SetConsoleMode(this->hConsole, ENABLE_VIRTUAL_TERMINAL_PROCESSING | ENABLE_PROCESSED_OUTPUT);
	}

	~DYE()
	{
		SetConsoleMode(this->hConsole, this->oldConsoleMode);
		CloseHandle(this->hConsole);
	}

	const char* red = "\x1B[31m";
	const char* green = "\x1B[32m";
	const char* reset = "\x1B[0m";
	const char* yellow = "\x1B[33m";
	const char* purple = "\x1B[35m";

};

inline DYE dye;



#ifndef PRINTOUT
#define PRINTOUT

#define CPrint(a, b)   CPrintOut.PrintStandard(a, b);
#define CPrintWarning(a, b)   CPrintOut.PrintStandardWarning(a, b);
#define CPrintError(a, b)	CPrintOut.PrintError(a, b);
#define CPrintErrorCode(a, b, c)	CPrintOut.PrintErrorWithStatus(a, b, c);
#define CAppendedPrintError(a, b)	CPrintOut.AppendedPrintError(a, b);
#define CAppendedPrintErrorCode(a, b, c)	CPrintOut.AppendedPrintErrorWithStatus(a, b, c);
#define CAppendedPrint(a, b)	CPrintOut.PrintStandardAppended(a, b);
#define CPrintWithVariable(a, b, c)	CPrintOut.PrintStandardWithVariable(a, b, c);
#define CPrintVariable(a, b)	 CPrintOut.PrintVariable(a, b);
#define CPrintBland(a)	CPrintOut.PrintStandardNoThreadOrSymbol(a);

#endif // !PRINTOUT






class PrintOut
{
public:
	std::mutex lock;
	std::unique_lock<std::mutex> guard = std::unique_lock(this->lock, std::defer_lock);
	

	
	void PrintError(__in char* threadName, __in char* errorText)
	{
		this->guard.lock();
		std::string errorA;
	
		errorA = std::format("{} : {}", threadName, errorText);
		std::cout << dye.red << xorstr_("[!]") << dye.reset << errorA << std::endl;
		this->guard.unlock();
	}

	void AppendedPrintError(__in char* threadName, __in char* errorText)
	{
		this->guard.lock();
		std::string errorA;

		errorA = std::format("{} : {}", threadName, errorText);
		std::cout << "\n" << dye.red << xorstr_("[!]") << dye.reset << errorA << std::endl;
		this->guard.unlock();
	}


	template <typename T>
	void PrintErrorWithStatus(__in char* threadName, __in char* errorText, __in T status)
	{
		this->guard.lock();
		std::string errorA;
		

		errorA = std::format("{} : {} : 0x{}", threadName, errorText, this->DecmialToHex(status).data());
		std::cout << dye.red << xorstr_("[!]") << dye.reset << errorA << std::endl;
		this->guard.unlock();
	}


	template <typename T>
	void AppendedPrintErrorWithStatus(__in char* threadName, __in char* errorText, __in T status)
	{
		this->guard.lock();
		std::string errorA;

		errorA = std::format("{} : {} : 0x{}", threadName, errorText, this->DecmialToHex(status).data());
		std::cout << "\n" << dye.red << xorstr_("[!]") << dye.reset << errorA << std::endl;
		this->guard.unlock();
	}

	void PrintStandardNoThreadOrSymbol(__in char* printText)
	{
		this->guard.lock();

		std::cout << printText << std::endl;

		this->guard.unlock();
	}
	
	void PrintStandard(__in char* threadName, __in char* printText)
	{
		this->guard.lock();
		std::string printA;

		printA = std::format("{} : {}", threadName, printText);
		std::cout << dye.green << xorstr_("[+]") << dye.reset << printA << std::endl;
		this->guard.unlock();
	}
	void PrintStandardAppended(__in char* threadName, __in char* printText)
	{
		this->guard.lock();
		std::string printA;

		printA = std::format("{} : {}", threadName, printText);
		std::cout << dye.green << xorstr_("[+]") << dye.reset << printA;
		this->guard.unlock();
	}

	
	template <typename T>
	void PrintStandardWithVariable(__in char* threadName, __in char* printText, __in T variable)
	{
		this->guard.lock();
		std::string printA;

		printA = std::format("{} : {} : 0x{}", threadName, printText, this->DecmialToHex(variable).data());
		std::cout << dye.green << xorstr_("[+]") << dye.reset << printA << std::endl;
		this->guard.unlock();
	}

	
	template <typename T>
	void PrintVariable(__in char* printText, __in T variable)
	{
		this->guard.lock();
		std::string printA;

		printA = std::format("{} : 0x{}", printText, this->DecmialToHex(variable).data());
		std::cout << dye.green << xorstr_("[+]") << dye.reset << printA << std::endl;
		this->guard.unlock();
	}

	void PrintStandardWarning(__in char* threadName, __in char* printText)
	{
		this->guard.lock();
		std::string printA;

		printA = std::format("{} : {}", threadName, printText);
		std::cout << dye.yellow << xorstr_("[-]") << dye.reset << printA << std::endl;
		this->guard.unlock();
	}

private:
		
	template <typename T>
	std::string DecmialToHex(__in T decimal)
	{
		std::stringstream ss{};
		ss << std::uppercase << std::hex << decimal;
		return ss.str();
	}		
};

inline PrintOut CPrintOut;