#pragma once
#include <Windows.h>
#include <cstdint>
#include <cstdio>
#include <string>

#ifndef FRAMEWORK_HPP
#define FRAMEWORK_HPP


using PHYSICAL_ADDRESS = LARGE_INTEGER;
using PPHYSICAL_ADDRESS = PHYSICAL_ADDRESS*;


#define FILE_OPEN_IF                             0x00000003
#define FILE_CREATE                              0x00000002
#define FILE_SYNCHRONOUS_IO_NONALERT             0x00000020
#define FILE_NON_DIRECTORY_FILE                  0x00000040
#define OBJ_CASE_INSENSITIVE                     0x00000040
#define FILE_PIPE_COMPLETE_OPERATION             0x00000001
#define FILE_PIPE_BYTE_STREAM_MODE               0x00000000
#define FILE_PIPE_BYTE_STREAM_TYPE               0x00000000



using NODE_REQUIREMENT = unsigned long;
#define MM_ANY_NODE_OK                           0x80000000
#define MM_DONT_ZERO_ALLOCATION                  0x00000001
#define MM_ALLOCATE_FROM_LOCAL_NODE_ONLY         0x00000002
#define MM_ALLOCATE_FULLY_REQUIRED               0x00000004
#define MM_ALLOCATE_NO_WAIT                      0x00000008
#define MM_ALLOCATE_PREFER_CONTIGUOUS            0x00000010
#define MM_ALLOCATE_REQUIRE_CONTIGUOUS_CHUNKS    0x00000020
#define MM_ALLOCATE_FULLY_REQUIRED               0x00000004



#define STATUS_SUCCESS                   ((NTSTATUS)0x00000000)
#define STATUS_UNSUCCESSFUL              ((NTSTATUS)0xC0000001L)
#define STATUS_INSUFFICIENT_RESOURCES    ((NTSTATUS)0xC000009AL)
#define STATUS_INVALID_PARAMETER_1       ((NTSTATUS)0xC00000EFL)
#define STATUS_INVALID_PARAMETER_2       ((NTSTATUS)0xC00000F0L)
#define STATUS_INVALID_PARAMETER_3       ((NTSTATUS)0xC00000F1L)
#define STATUS_NOT_FOUND                 ((NTSTATUS)0xC0000225L)
#define STATUS_NOT_SUPPORTED             ((NTSTATUS)0xC00000BBL)
#define STATUS_INFO_LENGTH_MISMATCH      ((NTSTATUS)0xC0000004L)

#define AFD_NOTIFYSOCK_IOCTL 0x12127
#define FREE_AFD_HANDLE 0x00000001
#define HOLD_AFD_HANDLE 0x00000002
#define PAGE_SIZE 0x1000
#define API_SET_VERSION_V6  6
#define API_SET_VERSION_V2  2
#define DLL_COUNT 8


#define RELATIVE_ADDRESS(address, size) ((VOID *)((UINT8 *)(address) + *(INT32 *)((UINT8 *)(address) + ((size) - (INT32)sizeof(INT32))) + (size)))
#define PointerToOffset(offset, base) U_PTR(U_PTR(offset) - U_PTR(base))
#define OffsetToPointer(offset, base) U_PTR(U_PTR(offset) + U_PTR(base))

#define C_PTR( x ) ((void*) x)
#define U_PTR( x ) ((ULONG_PTR) x)
#define U_PTR32( x ) (( ULONG32 ) x)
#define U_PTR64( x ) (( ULONG64 ) x)
#define C_DEF64( x ) (*( ULONG64* ) x)
#define C_DEF32( x ) (*( ULONG32* ) x)
#define VDUMP( x ) xorstr_( #x) 

#define NtCurrentProcess() ((HANDLE)(LONG_PTR)-1)
#define NT_SUCCESS( Status ) ((NTSTATUS)( Status) >= 0)
#define HR_SUCCESS( Status ) ((HRESULT)( Status) >= 0)


#define InitializeUnicodeString(u,s) \
    do { \
        (u)->Length = (std::wcslen(s) * sizeof(wchar_t)); \
        (u)->MaximumLength = ((u)->Length + sizeof(wchar_t)); \
        (u)->Buffer = s; \
    } while (0)\

#define InitializeAnsiString(u,s) \
    do { \
        (u)->Length = (std::strlen(s) * sizeof(char)); \
        (u)->MaximumLength = ((u)->Length + sizeof(char)); \
        (u)->Buffer = s; \
    } while (0)\


#define InitializeObjectAttributes(p,n,a,r,s) \
        do { \
            (p)->Length = sizeof(OBJECT_ATTRIBUTES); \
            (p)->RootDirectory = r; \
            (p)->Attributes = a; \
            (p)->ObjectName = n; \
            (p)->SecurityDescriptor = s; \
            (p)->SecurityQualityOfService = nullptr; \
        } while (0)\

#define InitializeUString(u,d,s) \
    do { \
        (u)->Length = s; \
        (u)->MaximumLength = s; \
        (u)->Buffer = d; \
    } while (0)\



    using FUNCTION_PTRS = struct _FUNCTION_PTRS
    {
        void* function_Ptr;
        std::uint32_t hashedName;
    };


    using IMAGE_ALLOC = struct _IMAGE_ALLOC
    {
        void* allocPtr;
        std::size_t szAlloc;
        const wchar_t* imageName;
    };

    using HOOKED_TEXT = struct _HOOKED_TEXT
    {
        void* allocPtr;
        void* textSectionPtr;
        std::size_t sztextSection;      
    };

    using MAPPED_INFO = struct _MAPPED_INFO
    {
        LPVOID mappedPtr;
        std::wstring mappedName;
    };


    using IMAGE_INFO = struct _IMAGE_INFO
    {
        void* baseAddr;
        std::uint32_t hashedName;
    };


    using LOADED_BUFFERS = struct _LOADED_BUFFERS
    {
        void* loadedImageBuffer;
        std::uint32_t hashedNames;
    };


    using USTRING = struct _USTRING
    {
        DWORD	Length;
        DWORD	MaximumLength;
        PVOID	Buffer;
    };


    using UNICODE_STRING = struct _UNICODE_STRING
    {
        USHORT Length;
        USHORT MaximumLength;
        PWSTR  Buffer;
    };
    using PUNICODE_STRING = UNICODE_STRING*;



    using ANSI_STRING = struct _STRING
    {
        USHORT Length;
        USHORT MaximumLength;
        PCHAR  Buffer;
    };
    using PANSI_STRING = ANSI_STRING*;


    using FILE_STANDARD_INFORMATION = struct _FILE_STANDARD_INFORMATION
    {
        LARGE_INTEGER AllocationSize;
        LARGE_INTEGER EndOfFile;
        ULONG         NumberOfLinks;
        BOOLEAN       DeletePending;
        BOOLEAN       Directory;
    };
    using PFILE_STANDARD_INFORMATION = FILE_STANDARD_INFORMATION*;


    using SYSTEM_MODULE_ENTRY = struct _SYSTEM_MODULE_ENTRY
    {
        HANDLE Section;
        PVOID MappedBase;
        PVOID ImageBase;
        ULONG ImageSize;
        ULONG Flags;
        USHORT LoadOrderIndex;
        USHORT InitOrderIndex;
        USHORT LoadCount;
        USHORT OffsetToFileName;
        UCHAR  FullPathName[256];
    };
    using PSYSTEM_MODULE_ENTRY = SYSTEM_MODULE_ENTRY*;


    using SYSTEM_MODULE_INFORMATION = struct _SYSTEM_MODULE_INFORMATION
    {
        ULONG_PTR Count;
        SYSTEM_MODULE_ENTRY Module[1];
    };
    using PSYSTEM_MODULE_INFORMATION = SYSTEM_MODULE_INFORMATION*;



    using POLL_TYPE = enum _POOL_TYPE
    {
        NonPagedPool,
        NonPagedPoolExecute = NonPagedPool,
        PagedPool,
        NonPagedPoolMustSucceed = NonPagedPool + 2,
        DontUseThisType,
        NonPagedPoolCacheAligned = NonPagedPool + 4,
        PagedPoolCacheAligned,
        NonPagedPoolCacheAlignedMustS = NonPagedPool + 6,
        MaxPoolType,
        NonPagedPoolBase = 0,
        NonPagedPoolBaseMustSucceed = NonPagedPoolBase + 2,
        NonPagedPoolBaseCacheAligned = NonPagedPoolBase + 4,
        NonPagedPoolBaseCacheAlignedMustS = NonPagedPoolBase + 6,
        NonPagedPoolSession = 32,
        PagedPoolSession = NonPagedPoolSession + 1,
        NonPagedPoolMustSucceedSession = PagedPoolSession + 1,
        DontUseThisTypeSession = NonPagedPoolMustSucceedSession + 1,
        NonPagedPoolCacheAlignedSession = DontUseThisTypeSession + 1,
        PagedPoolCacheAlignedSession = NonPagedPoolCacheAlignedSession + 1,
        NonPagedPoolCacheAlignedMustSSession = PagedPoolCacheAlignedSession + 1,
        NonPagedPoolNx = 512,
        NonPagedPoolNxCacheAligned = NonPagedPoolNx + 4,
        NonPagedPoolSessionNx = NonPagedPoolNx + 32,
    };

    using AFD_NOTIFYSOCK_DATA = struct _AFD_NOTIFYSOCK_DATA
    {
        HANDLE Completion;
        PVOID Data1;
        PVOID Data2;
        PVOID PwnPtr;
        DWORD Counter;
        DWORD Timeout;
        DWORD Length;
        char Padding[0x4];
    };


    using OBJECT_TYPE_INFORMATION = struct _OBJECT_TYPE_INFORMATION
    {
        UNICODE_STRING TypeName;
        ULONG TotalNumberOfObjects;
        ULONG TotalNumberOfHandles;
        ULONG TotalPagedPoolUsage;
        ULONG TotalNonPagedPoolUsage;
        ULONG TotalNamePoolUsage;
        ULONG TotalHandleTableUsage;
        ULONG HighWaterNumberOfObjects;
        ULONG HighWaterNumberOfHandles;
        ULONG HighWaterPagedPoolUsage;
        ULONG HighWaterNonPagedPoolUsage;
        ULONG HighWaterNamePoolUsage;
        ULONG HighWaterHandleTableUsage;
        ULONG InvalidAttributes;
        GENERIC_MAPPING GenericMapping;
        ULONG ValidAccessMask;
        BOOLEAN SecurityRequired;
        BOOLEAN MaintainHandleCount;
        BOOLEAN TypeIndex;
        CHAR ReservedByte;
        ULONG PoolType;
        ULONG DefaultPagedPoolCharge;
        ULONG DefaultNonPagedPoolCharge;
    };
    using POBJECT_TYPE_INFORMATION = OBJECT_TYPE_INFORMATION*;


    using SYSTEM_HANDLE_TABLE_ENTRY_INFO = struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO
    {
        USHORT UniqueProcessId;
        USHORT CreatorBackTraceIndex;
        UCHAR ObjectTypeIndex;
        UCHAR HandleAttributes;
        USHORT HandleValue;
        void* Object;
        ULONG GrantedAccess;
        LONG __PADDING__[1];
    };
    using PSYSTEM_HANDLE_TABLE_ENTRY_INFO = SYSTEM_HANDLE_TABLE_ENTRY_INFO*;


    using SYSTEM_HANDLE_INFORMATION = struct _SYSTEM_HANDLE_INFORMATION
    {
        ULONG Count;
        struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO Handle[1];
    };
    using PSYSTEM_HANDLE_INFORMATION = SYSTEM_HANDLE_INFORMATION*;


    using DISPATCHER_HEADER = struct _DISPATCHER_HEADER
    {
        union
        {
            volatile long Lock;
            long LockNV;
            struct
            {
                unsigned char Type;
                unsigned char Signalling;
                unsigned char Size;
                unsigned char Reserved1;
            };
            struct
            {
                unsigned char TimerType;
                union
                {
                    unsigned char TimerControlFlags;
                    struct
                    {
                        struct
                        {
                            unsigned char Absolute : 1;
                            unsigned char Wake : 1;
                            unsigned char EncodedTolerableDelay : 6;
                        };
                        unsigned char Hand;
                        union
                        {
                            unsigned char TimerMiscFlags;
                            struct
                            {
                                unsigned char Index : 6;
                                unsigned char Inserted : 1;
                                volatile unsigned char Expired : 1;
                            };
                        };
                    };
                };
            };
            struct
            {
                unsigned char Timer2Type;
                union
                {
                    unsigned char Timer2Flags;
                    struct
                    {
                        struct
                        {
                            unsigned char Timer2Inserted : 1;
                            unsigned char Timer2Expiring : 1;
                            unsigned char Timer2CancelPending : 1;
                            unsigned char Timer2SetPending : 1;
                            unsigned char Timer2Running : 1;
                            unsigned char Timer2Disabled : 1;
                            unsigned char Timer2ReservedFlags : 2;
                        };
                        unsigned char Timer2ComponentId;
                        unsigned char Timer2RelativeId;
                    };
                };
            };
            struct
            {
                unsigned char QueueType;
                union
                {
                    unsigned char QueueControlFlags;
                    struct
                    {
                        struct
                        {
                            unsigned char Abandoned : 1;
                            unsigned char DisableIncrement : 1;
                            unsigned char QueueReservedControlFlags : 6;
                        };
                        unsigned char QueueSize;
                        unsigned char QueueReserved;
                    };
                };
            };
            struct
            {
                unsigned char ThreadType;
                unsigned char ThreadReserved;
                union
                {
                    unsigned char ThreadControlFlags;
                    struct
                    {
                        struct
                        {
                            unsigned char CycleProfiling : 1;
                            unsigned char CounterProfiling : 1;
                            unsigned char GroupScheduling : 1;
                            unsigned char AffinitySet : 1;
                            unsigned char Tagged : 1;
                            unsigned char EnergyProfiling : 1;
                            unsigned char SchedulerAssist : 1;
                            unsigned char ThreadReservedControlFlags : 1;
                        };
                        union
                        {
                            unsigned char DebugActive;
                            struct
                            {
                                unsigned char ActiveDR7 : 1;
                                unsigned char Instrumented : 1;
                                unsigned char Minimal : 1;
                                unsigned char Reserved4 : 2;
                                unsigned char AltSyscall : 1;
                                unsigned char Emulation : 1;
                                unsigned char Reserved5 : 1;
                            };
                        };
                    };
                };
            };
            struct
            {
                unsigned char MutantType;
                unsigned char MutantSize;
                unsigned char DpcActive;
                unsigned char MutantReserved;
            };
        };
        long SignalState;
        LIST_ENTRY WaitListHead;
    };
    using PDISPATCHER_HEADER = DISPATCHER_HEADER*;


    using KEVENT = struct _KEVENT
    {
        struct _DISPATCHER_HEADER Header;
    };
    using PKEVENT = KEVENT*;



    using NT_IORING_CREATE_ADVISORY_FLAGS = enum _NT_IORING_CREATE_ADVISORY_FLAGS
    {
        NT_IORING_CREATE_ADVISORY_FLAG_NONE = 0
    };


    using NT_IORING_CREATE_REQUIRED_FLAGS = enum _NT_IORING_CREATE_REQUIRED_FLAGS
    {
        NT_IORING_CREATE_REQUIRED_FLAG_NONE = 0
    };



    using NT_IORING_CREATE_FLAGS = struct _NT_IORING_CREATE_FLAGS
    {
        enum _NT_IORING_CREATE_REQUIRED_FLAGS Required;
        enum _NT_IORING_CREATE_ADVISORY_FLAGS Advisory;
    };
    using PNT_IORING_CREATE_FLAGS = NT_IORING_CREATE_FLAGS*;



    using NT_IORING_INFO = struct _NT_IORING_INFO
    {
        enum IORING_VERSION IoRingVersion;
        struct _NT_IORING_CREATE_FLAGS Flags;
        unsigned int SubmissionQueueSize;
        unsigned int SubmissionQueueRingMask;
        unsigned int CompletionQueueSize;
        unsigned int CompletionQueueRingMask;
        struct _NT_IORING_SUBMISSION_QUEUE* SubmissionQueue;
        struct _NT_IORING_COMPLETION_QUEUE* CompletionQueue;
    };
    using PNT_IORING_INFO = NT_IORING_INFO*;


    using IOP_MC_BUFFER_ENTRY = struct _IOP_MC_BUFFER_ENTRY
    {
        USHORT Type;
        USHORT Reserved;
        ULONG Size;
        ULONG ReferenceCount;
        ULONG Flags;
        LIST_ENTRY GlobalDataLink;
        PVOID Address;
        ULONG Length;
        CHAR AccessMode;
        ULONG MdlRef;
        struct _MDL* Mdl;
        KEVENT MdlRundownEvent;
        PULONG64 PfnArray;
        BYTE PageNodes[0x20];
    };
    using PIOP_MC_BUFFER_ENTRY = IOP_MC_BUFFER_ENTRY*;


    using IORING_OBJECT = struct _IORING_OBJECT
    {
        short Type;
        short Size;
        struct _NT_IORING_INFO UserInfo;
        void* Section;
        struct _NT_IORING_SUBMISSION_QUEUE* SubmissionQueue;
        struct _MDL* CompletionQueueMdl;
        struct _NT_IORING_COMPLETION_QUEUE* CompletionQueue;
        unsigned __int64 ViewSize;
        long InSubmit;
        unsigned __int64 CompletionLock;
        unsigned __int64 SubmitCount;
        unsigned __int64 CompletionCount;
        unsigned __int64 CompletionWaitUntil;
        struct _KEVENT CompletionEvent;
        unsigned char SignalCompletionEvent;
        struct _KEVENT* CompletionUserEvent;
        unsigned int RegBuffersCount;
        struct _IOP_MC_BUFFER_ENTRY** RegBuffers;
        unsigned int RegFilesCount;
        void** RegFiles;
    };
    using PIORING_OBJECT = IORING_OBJECT*;


    using _HIORING = struct _HIORING
    {
        HANDLE handle;
        NT_IORING_INFO Info;
        ULONG IoRingKernelAcceptedVersion;
        PVOID RegBufferArray;
        ULONG BufferArraySize;
        PVOID Unknown;
        ULONG FileHandlesCount;
        ULONG SubQueueHead;
        ULONG SubQueueTail;
    };



    using EVENT_TYPE = enum _EVENT_TYPE
    {
        NotificationEvent,
        SynchronizationEvent
    };



    using PEB_LDR_DATA64 = struct _PEB_LDR_DATA64
    {
        BYTE       Reserved1[8];
        PVOID      Reserved2[3];
        LIST_ENTRY InMemoryOrderModuleList;
    };
    using PPEB_LDR_DATA64 = PEB_LDR_DATA64*;




    using LDR_DATA_TABLE_ENTRY64 = struct _LDR_DATA_TABLE_ENTRY64
    {
        struct _LIST_ENTRY InLoadOrderLinks;                                  
        struct _LIST_ENTRY InMemoryOrderLinks;                                 
        struct _LIST_ENTRY InInitializationOrderLinks;                          
        VOID* DllBase;                                                        
        VOID* EntryPoint;                                                       
        ULONG SizeOfImage;                                                    
        UNICODE_STRING FullDllName;                                     
        UNICODE_STRING BaseDllName;                                    
    };
    using PLDR_DATA_TABLE_ENTRY64 = LDR_DATA_TABLE_ENTRY64*;


    /// <summary>
    /// regular PEB not PEB64
    /// </summary>
    using PEB64 = struct _PEB64
    {
        UCHAR InheritedAddressSpace;                                            //0x0
        UCHAR ReadImageFileExecOptions;                                         //0x1
        UCHAR BeingDebugged;                                                    //0x2
        union
        {
            UCHAR BitField;                                                     //0x3
            struct
            {
                UCHAR ImageUsesLargePages : 1;                                    //0x3
                UCHAR IsProtectedProcess : 1;                                     //0x3
                UCHAR IsImageDynamicallyRelocated : 1;                            //0x3
                UCHAR SkipPatchingUser32Forwarders : 1;                           //0x3
                UCHAR IsPackagedProcess : 1;                                      //0x3
                UCHAR IsAppContainer : 1;                                         //0x3
                UCHAR IsProtectedProcessLight : 1;                                //0x3
                UCHAR IsLongPathAwareProcess : 1;                                 //0x3
            };
        };
        UCHAR Padding0[4];                                                      //0x4
        VOID* Mutant;                                                           //0x8
        VOID* ImageBaseAddress;                                                 //0x10
        PPEB_LDR_DATA64 Ldr;                                                    //0x18
        struct _RTL_USER_PROCESS_PARAMETERS* ProcessParameters;                 //0x20
        VOID* SubSystemData;                                                    //0x28
        VOID* ProcessHeap;                                                      //0x30
        struct _RTL_CRITICAL_SECTION* FastPebLock;                              //0x38
        union _SLIST_HEADER* volatile AtlThunkSListPtr;                         //0x40
        VOID* IFEOKey;                                                          //0x48
        union
        {
            ULONG CrossProcessFlags;                                            //0x50
            struct
            {
                ULONG ProcessInJob : 1;                                           //0x50
                ULONG ProcessInitializing : 1;                                    //0x50
                ULONG ProcessUsingVEH : 1;                                        //0x50
                ULONG ProcessUsingVCH : 1;                                        //0x50
                ULONG ProcessUsingFTH : 1;                                        //0x50
                ULONG ProcessPreviouslyThrottled : 1;                             //0x50
                ULONG ProcessCurrentlyThrottled : 1;                              //0x50
                ULONG ProcessImagesHotPatched : 1;                                //0x50
                ULONG ReservedBits0 : 24;                                         //0x50
            };
        };
        UCHAR Padding1[4];                                                      //0x54
        union
        {
            VOID* KernelCallbackTable;                                          //0x58
            VOID* UserSharedInfoPtr;                                            //0x58
        };
        ULONG SystemReserved;                                                   //0x60
        ULONG AtlThunkSListPtr32;                                               //0x64
        VOID* ApiSetMap;                                                        //0x68
        ULONG TlsExpansionCounter;                                              //0x70
        UCHAR Padding2[4];                                                      //0x74
        struct _RTL_BITMAP* TlsBitmap;                                          //0x78
        ULONG TlsBitmapBits[2];                                                 //0x80
        VOID* ReadOnlySharedMemoryBase;                                         //0x88
        VOID* SharedData;                                                       //0x90
        VOID** ReadOnlyStaticServerData;                                        //0x98
        VOID* AnsiCodePageData;                                                 //0xa0
        VOID* OemCodePageData;                                                  //0xa8
        VOID* UnicodeCaseTableData;                                             //0xb0
        ULONG NumberOfProcessors;                                               //0xb8
        ULONG NtGlobalFlag;                                                     //0xbc
        union _LARGE_INTEGER CriticalSectionTimeout;                            //0xc0
        ULONGLONG HeapSegmentReserve;                                           //0xc8
        ULONGLONG HeapSegmentCommit;                                            //0xd0
        ULONGLONG HeapDeCommitTotalFreeThreshold;                               //0xd8
        ULONGLONG HeapDeCommitFreeBlockThreshold;                               //0xe0
        ULONG NumberOfHeaps;                                                    //0xe8
        ULONG MaximumNumberOfHeaps;                                             //0xec
        VOID** ProcessHeaps;                                                    //0xf0
        VOID* GdiSharedHandleTable;                                             //0xf8
        VOID* ProcessStarterHelper;                                             //0x100
        ULONG GdiDCAttributeList;                                               //0x108
        UCHAR Padding3[4];                                                      //0x10c
        struct _RTL_CRITICAL_SECTION* LoaderLock;                               //0x110
        ULONG OSMajorVersion;                                                   //0x118
        ULONG OSMinorVersion;                                                   //0x11c
        USHORT OSBuildNumber;                                                   //0x120
        USHORT OSCSDVersion;                                                    //0x122
        ULONG OSPlatformId;                                                     //0x124
        ULONG ImageSubsystem;                                                   //0x128
        ULONG ImageSubsystemMajorVersion;                                       //0x12c
        ULONG ImageSubsystemMinorVersion;                                       //0x130
        UCHAR Padding4[4];                                                      //0x134
        ULONGLONG ActiveProcessAffinityMask;                                    //0x138
        ULONG GdiHandleBuffer[60];                                              //0x140
        VOID(*PostProcessInitRoutine)();                                       //0x230
        struct _RTL_BITMAP* TlsExpansionBitmap;                                 //0x238
        ULONG TlsExpansionBitmapBits[32];                                       //0x240
        ULONG SessionId;                                                        //0x2c0
        UCHAR Padding5[4];                                                      //0x2c4
        union _ULARGE_INTEGER AppCompatFlags;                                   //0x2c8
        union _ULARGE_INTEGER AppCompatFlagsUser;                               //0x2d0
        VOID* pShimData;                                                        //0x2d8
        VOID* AppCompatInfo;                                                    //0x2e0
        UNICODE_STRING CSDVersion;                                              //0x2e8
        struct _ACTIVATION_CONTEXT_DATA* ActivationContextData;                 //0x2f8
        struct _ASSEMBLY_STORAGE_MAP* ProcessAssemblyStorageMap;                //0x300
        struct _ACTIVATION_CONTEXT_DATA* SystemDefaultActivationContextData;    //0x308
        struct _ASSEMBLY_STORAGE_MAP* SystemAssemblyStorageMap;                 //0x310
        ULONGLONG MinimumStackCommit;                                           //0x318
        VOID* SparePointers[2];                                                 //0x320
        VOID* PatchLoaderData;                                                  //0x330
        struct _CHPEV2_PROCESS_INFO* ChpeV2ProcessInfo;                         //0x338
        ULONG AppModelFeatureState;                                             //0x340
        ULONG SpareUlongs[2];                                                   //0x344
        USHORT ActiveCodePage;                                                  //0x34c
        USHORT OemCodePage;                                                     //0x34e
        USHORT UseCaseMapping;                                                  //0x350
        USHORT UnusedNlsField;                                                  //0x352
        VOID* WerRegistrationData;                                              //0x358
        VOID* WerShipAssertPtr;                                                 //0x360
        VOID* EcCodeBitMap;                                                     //0x368
        VOID* pImageHeaderHash;                                                 //0x370
        union
        {
            ULONG TracingFlags;                                                 //0x378
            struct
            {
                ULONG HeapTracingEnabled : 1;                                     //0x378
                ULONG CritSecTracingEnabled : 1;                                  //0x378
                ULONG LibLoaderTracingEnabled : 1;                                //0x378
                ULONG SpareTracingBits : 29;                                      //0x378
            };
        };
        UCHAR Padding6[4];                                                      //0x37c
        ULONGLONG CsrServerReadOnlySharedMemoryBase;                            //0x380
        ULONGLONG TppWorkerpListLock;                                           //0x388
        struct _LIST_ENTRY TppWorkerpList;                                      //0x390
        VOID* WaitOnAddressHashTable[128];                                      //0x3a0
        VOID* TelemetryCoverageHeader;                                          //0x7a0
        ULONG CloudFileFlags;                                                   //0x7a8
        ULONG CloudFileDiagFlags;                                               //0x7ac
        CHAR PlaceholderCompatibilityMode;                                      //0x7b0
        CHAR PlaceholderCompatibilityModeReserved[7];                           //0x7b1
        struct _LEAP_SECOND_DATA* LeapSecondData;                               //0x7b8
        union
        {
            ULONG LeapSecondFlags;                                              //0x7c0
            struct
            {
                ULONG SixtySecondEnabled : 1;                                     //0x7c0
                ULONG Reserved : 31;                                              //0x7c0
            };
        };
        ULONG NtGlobalFlag2;                                                    //0x7c4
        ULONGLONG ExtendedFeatureDisableMask;
    };
    using PPEB64 = PEB64*;


    using OBJECT_ATTRIBUTES = struct _OBJECT_ATTRIBUTES
    {
        ULONG Length;
        HANDLE RootDirectory;
        UNICODE_STRING* ObjectName;
        ULONG Attributes;
        PVOID SecurityDescriptor;
        PVOID SecurityQualityOfService;
    };
    using POBJECT_ATTRIBUTES = OBJECT_ATTRIBUTES*;


    using IO_STATUS_BLOCK = struct _IO_STATUS_BLOCK
    {
    #pragma warning(push)
    #pragma warning(disable: 4201) // we'll always use the Microsoft compiler
        union {
            NTSTATUS Status;
            PVOID Pointer;
        } DUMMYUNIONNAME;
    #pragma warning(pop)

        ULONG_PTR Information;
    };
    using PIO_STATUS_BLOCK = IO_STATUS_BLOCK*;


    using PIO_APC_ROUTINE = void(__stdcall*)(PVOID, PIO_STATUS_BLOCK, ULONG);



    using API_SET_NAMESPACE_ENTRY_V2 = struct _API_SET_NAMESPACE_ENTRY_V2
    {
        ULONG NameOffset;
        ULONG NameLength;
        ULONG DataOffset;
    };
    using PAPI_SET_NAMESPACE_ENTRY_V2 = API_SET_NAMESPACE_ENTRY_V2*;


    using API_SET_NAMESPACE_ARRAY_V2 = struct _API_SET_NAMESPACE_ARRAY_V2
    {
        ULONG Version;
        ULONG Count;
        API_SET_NAMESPACE_ENTRY_V2 Array[ANYSIZE_ARRAY];
    };
    using PAPI_SET_NAMESPACE_ARRAY_V2 = API_SET_NAMESPACE_ARRAY_V2*;


    using API_SET_VALUE_ENTRY_V6 = struct _API_SET_VALUE_ENTRY_V6
    {
        ULONG Flags;
        ULONG NameOffset;
        ULONG NameLength;
        ULONG ValueOffset;
        ULONG ValueLength;
    };
    using PAPI_SET_VALUE_ENTRY_V6 = API_SET_VALUE_ENTRY_V6*;


    using API_SET_NAMESPACE_HASH_ENTRY_V6 = struct _API_SET_NAMESPACE_HASH_ENTRY_V6
    {
        ULONG Hash;
        ULONG Index;
    };
    using PAPI_SET_NAMESPACE_HASH_ENTRY_V6 = API_SET_NAMESPACE_HASH_ENTRY_V6*;


    using API_SET_NAMESPACE_ENTRY_V6 = struct _API_SET_NAMESPACE_ENTRY_V6
    {
        ULONG Flags;
        ULONG NameOffset;
        ULONG Size;
        ULONG NameLength;
        ULONG DataOffset;
        ULONG Count;
    };
    using PAPI_SET_NAMESPACE_ENTRY_V6 = API_SET_NAMESPACE_ENTRY_V6*;


    using API_SET_NAMESPACE_ARRAY_V6 = struct _API_SET_NAMESPACE_ARRAY_V6
    {
        ULONG Version;
        ULONG Size;
        ULONG Flags;
        ULONG Count;
        ULONG DataOffset;
        ULONG HashOffset;
        ULONG Multiplier;
        API_SET_NAMESPACE_ENTRY_V6 Array[ANYSIZE_ARRAY];
    };
    using PAPI_SET_NAMESPACE_ARRAY_V6 = API_SET_NAMESPACE_ARRAY_V6*;


    using IMAGE_RELOC = struct _IMAGE_RELOC
    {
        WORD Offset : 0xc;
        WORD Type : 0x4;
    };
    using PIMAGE_RELOC = IMAGE_RELOC*;



    using PROCESSENTRY32W = struct tagPROCESSENTRY32W
    {
        DWORD     dwSize;
        DWORD     cntUsage;
        DWORD     th32ProcessID;
        ULONG_PTR th32DefaultHeapID;
        DWORD     th32ModuleID;
        DWORD     cntThreads;
        DWORD     th32ParentProcessID;
        LONG      pcPriClassBase;
        DWORD     dwFlags;
        WCHAR     szExeFile[MAX_PATH];
    };
    using LPPROCESSENTRY32W = PROCESSENTRY32W*;



    using FILE_INFORMATION_CLASS = enum _FILE_INFORMATION_CLASS
    {
        FileDirectoryInformation = 1,
        FileStandardInformation  = 5
    };


     using SYSTEM_INFORMATION_CLASS = enum _SYSTEM_INFORMATION_CLASS
    {
        SystemBasicInformation = 0,
        SystemProcessorInformation = 1,
        SystemPerformanceInformation = 2,
        SystemTimeOfDayInformation = 3,
        SystemPathInformation = 4,
        SystemProcessInformation = 5,
        SystemCallCountInformation = 6,
        SystemDeviceInformation = 7,
        SystemProcessorPerformanceInformation = 8,
        SystemFlagsInformation = 9,
        SystemCallTimeInformation = 10,
        SystemModuleInformation = 11,
        SystemLocksInformation = 12,
        SystemStackTraceInformation = 13,
        SystemPagedPoolInformation = 14,
        SystemNonPagedPoolInformation = 15,
        SystemHandleInformation = 16,
        SystemObjectInformation = 17,
        SystemPageFileInformation = 18,
        SystemVdmInstemulInformation = 19,
        SystemVdmBopInformation = 20,
        SystemFileCacheInformation = 21,
        SystemPoolTagInformation = 22,
        SystemInterruptInformation = 23,
        SystemDpcBehaviorInformation = 24,
        SystemFullMemoryInformation = 25,
        SystemLoadGdiDriverInformation = 26,
        SystemUnloadGdiDriverInformation = 27,
        SystemTimeAdjustmentInformation = 28,
        SystemSummaryMemoryInformation = 29,
        SystemMirrorMemoryInformation = 30,
        SystemPerformanceTraceInformation = 31,
        SystemObsolete0 = 32,
        SystemExceptionInformation = 33,
        SystemCrashDumpStateInformation = 34,
        SystemKernelDebuggerInformation = 35,
        SystemContextSwitchInformation = 36,
        SystemRegistryQuotaInformation = 37,
        SystemExtendServiceTableInformation = 38,
        SystemPrioritySeperation = 39,
        SystemVerifierAddDriverInformation = 40,
        SystemVerifierRemoveDriverInformation = 41,
        SystemProcessorIdleInformation = 42,
        SystemLegacyDriverInformation = 43,
        SystemCurrentTimeZoneInformation = 44,
        SystemLookasideInformation = 45,
        SystemTimeSlipNotification = 46,
        SystemSessionCreate = 47,
        SystemSessionDetach = 48,
        SystemSessionInformation = 49,
        SystemRangeStartInformation = 50,
        SystemVerifierInformation = 51,
        SystemVerifierThunkExtend = 52,
        SystemSessionProcessInformation = 53,
        SystemLoadGdiDriverInSystemSpace = 54,
        SystemNumaProcessorMap = 55,
        SystemPrefetcherInformation = 56,
        SystemExtendedProcessInformation = 57,
        SystemRecommendedSharedDataAlignment = 58,
        SystemComPlusPackage = 59,
        SystemNumaAvailableMemory = 60,
        SystemProcessorPowerInformation = 61,
        SystemEmulationBasicInformation = 62,
        SystemEmulationProcessorInformation = 63,
        SystemExtendedHandleInformation = 64,
        SystemLostDelayedWriteInformation = 65,
        SystemBigPoolInformation = 66,
        SystemSessionPoolTagInformation = 67,
        SystemSessionMappedViewInformation = 68,
        SystemHotpatchInformation = 69,
        SystemObjectSecurityMode = 70,
        SystemWatchdogTimerHandler = 71,
        SystemWatchdogTimerInformation = 72,
        SystemLogicalProcessorInformation = 73,
        SystemWow64SharedInformationObsolete = 74,
        SystemRegisterFirmwareTableInformationHandler = 75,
        SystemFirmwareTableInformation = 76,
        SystemModuleInformationEx = 77,
        SystemVerifierTriageInformation = 78,
        SystemSuperfetchInformation = 79,
        SystemMemoryListInformation = 80,
        SystemFileCacheInformationEx = 81,
        SystemThreadPriorityClientIdInformation = 82,
        SystemProcessorIdleCycleTimeInformation = 83,
        SystemVerifierCancellationInformation = 84,
        SystemProcessorPowerInformationEx = 85,
        SystemRefTraceInformation = 86,
        SystemSpecialPoolInformation = 87,
        SystemProcessIdInformation = 88,
        SystemErrorPortInformation = 89,
        SystemBootEnvironmentInformation = 90,
        SystemHypervisorInformation = 91,
        SystemVerifierInformationEx = 92,
        SystemTimeZoneInformation = 93,
        SystemImageFileExecutionOptionsInformation = 94,
        SystemCoverageInformation = 95,
        SystemPrefetchPatchInformation = 96,
        SystemVerifierFaultsInformation = 97,
        SystemSystemPartitionInformation = 98,
        SystemSystemDiskInformation = 99,
        SystemProcessorPerformanceDistribution = 100,
        SystemNumaProximityNodeInformation = 101,
        SystemDynamicTimeZoneInformation = 102,
        SystemCodeIntegrityInformation = 103,
        SystemProcessorMicrocodeUpdateInformation = 104,
        SystemProcessorBrandString = 105,
        SystemVirtualAddressInformation = 106,
        SystemLogicalProcessorAndGroupInformation = 107,
        SystemProcessorCycleTimeInformation = 108,
        SystemStoreInformation = 109,
        SystemRegistryAppendString = 110,
        SystemAitSamplingValue = 111,
        SystemVhdBootInformation = 112,
        SystemCpuQuotaInformation = 113,
        SystemNativeBasicInformation = 114,
        SystemErrorPortTimeouts = 115,
        SystemLowPriorityIoInformation = 116,
        SystemBootEntropyInformation = 117,
        SystemVerifierCountersInformation = 118,
        SystemPagedPoolInformationEx = 119,
        SystemSystemPtesInformationEx = 120,
        SystemNodeDistanceInformation = 121,
        SystemAcpiAuditInformation = 122,
        SystemBasicPerformanceInformation = 123,
        SystemQueryPerformanceCounterInformation = 124,
        SystemSessionBigPoolInformation = 125,
        SystemBootGraphicsInformation = 126,
        SystemScrubPhysicalMemoryInformation = 127,
        SystemBadPageInformation = 128,
        SystemProcessorProfileControlArea = 129,
        SystemCombinePhysicalMemoryInformation = 130,
        SystemEntropyInterruptTimingInformation = 131,
        SystemConsoleInformation = 132,
        SystemPlatformBinaryInformation = 133,
        SystemPolicyInformation = 134,
        SystemHypervisorProcessorCountInformation = 135,
        SystemDeviceDataInformation = 136,
        SystemDeviceDataEnumerationInformation = 137,
        SystemMemoryTopologyInformation = 138,
        SystemMemoryChannelInformation = 139,
        SystemBootLogoInformation = 140,
        SystemProcessorPerformanceInformationEx = 141,
        SystemCriticalProcessErrorLogInformation = 142,
        SystemSecureBootPolicyInformation = 143,
        SystemPageFileInformationEx = 144,
        SystemSecureBootInformation = 145,
        SystemEntropyInterruptTimingRawInformation = 146,
        SystemPortableWorkspaceEfiLauncherInformation = 147,
        SystemFullProcessInformation = 148,
        SystemKernelDebuggerInformationEx = 149,
        SystemBootMetadataInformation = 150,
        SystemSoftRebootInformation = 151,
        SystemElamCertificateInformation = 152,
        SystemOfflineDumpConfigInformation = 153,
        SystemProcessorFeaturesInformation = 154,
        SystemRegistryReconciliationInformation = 155,
        SystemEdidInformation = 156,
        SystemManufacturingInformation = 157,
        SystemEnergyEstimationConfigInformation = 158,
        SystemHypervisorDetailInformation = 159,
        SystemProcessorCycleStatsInformation = 160,
        SystemVmGenerationCountInformation = 161,
        SystemTrustedPlatformModuleInformation = 162,
        SystemKernelDebuggerFlags = 163,
        SystemCodeIntegrityPolicyInformation = 164,
        SystemIsolatedUserModeInformation = 165,
        SystemHardwareSecurityTestInterfaceResultsInformation = 166,
        SystemSingleModuleInformation = 167,
        SystemAllowedCpuSetsInformation = 168,
        SystemVsmProtectionInformation = 169,
        SystemInterruptCpuSetsInformation = 170,
        SystemSecureBootPolicyFullInformation = 171,
        SystemCodeIntegrityPolicyFullInformation = 172,
        SystemAffinitizedInterruptProcessorInformation = 173,
        SystemRootSiloInformation = 174,
        SystemCpuSetInformation = 175,
        SystemCpuSetTagInformation = 176,
        SystemWin32WerStartCallout = 177,
        SystemSecureKernelProfileInformation = 178,
        SystemCodeIntegrityPlatformManifestInformation = 179,
        SystemInterruptSteeringInformation = 180,
        SystemSupportedProcessorArchitectures = 181,
        SystemMemoryUsageInformation = 182,
        SystemCodeIntegrityCertificateInformation = 183,
        SystemPhysicalMemoryInformation = 184,
        SystemControlFlowTransition = 185,
        SystemKernelDebuggingAllowed = 186,
        SystemActivityModerationExeState = 187,
        SystemActivityModerationUserSettings = 188,
        SystemCodeIntegrityPoliciesFullInformation = 189,
        SystemCodeIntegrityUnlockInformation = 190,
        SystemIntegrityQuotaInformation = 191,
        SystemFlushInformation = 192,
        SystemProcessorIdleMaskInformation = 193,
        SystemSecureDumpEncryptionInformation = 194,
        SystemWriteConstraintInformation = 195,
        SystemKernelVaShadowInformation = 196,
        SystemHypervisorSharedPageInformation = 197,
        SystemFirmwareBootPerformanceInformation = 198,
        SystemCodeIntegrityVerificationInformation = 199,
        SystemFirmwarePartitionInformation = 200,
        SystemSpeculationControlInformation = 201,
        SystemDmaGuardPolicyInformation = 202,
        SystemEnclaveLaunchControlInformation = 203,
        SystemWorkloadAllowedCpuSetsInformation = 204,
        SystemCodeIntegrityUnlockModeInformation = 205,
        SystemLeapSecondInformation = 206,
        SystemFlags2Information = 207,
        SystemSecurityModelInformation = 208,
        SystemCodeIntegritySyntheticCacheInformation = 209,
        SystemFeatureConfigurationInformation = 210,
        SystemFeatureConfigurationSectionInformation = 211,
        SystemFeatureUsageSubscriptionInformation = 212,
        SystemSecureSpeculationControlInformation = 213,
        SystemSpacesBootInformation = 214,
        SystemFwRamdiskInformation = 215,
        SystemWheaIpmiHardwareInformation = 216,
        SystemDifSetRuleClassInformation = 217,
        SystemDifClearRuleClassInformation = 218,
        SystemDifApplyPluginVerificationOnDriver = 219,
        SystemDifRemovePluginVerificationOnDriver = 220,
        SystemShadowStackInformation = 221,
        SystemBuildVersionInformation = 222,
        SystemPoolLimitInformation = 223,
        SystemCodeIntegrityAddDynamicStore = 224,
        SystemCodeIntegrityClearDynamicStores = 225,
        SystemDifPoolTrackingInformation = 226,
        SystemPoolZeroingInformation = 227,
        SystemDpcWatchdogInformation = 228,
        SystemDpcWatchdogInformation2 = 229,
        SystemSupportedProcessorArchitectures2 = 230,
        SystemSingleProcessorRelationshipInformation = 231,
        SystemXfgCheckFailureInformation = 232,
        SystemIommuStateInformation = 233,
        SystemHypervisorMinrootInformation = 234,
        SystemHypervisorBootPagesInformation = 235,
        SystemPointerAuthInformation = 236,
        SystemSecureKernelDebuggerInformation = 237,
        SystemOriginalImageFeatureInformation = 238,
        MaxSystemInfoClass = 239
    };


    using CLIENT_ID = struct _CLIENT_ID
    {
        HANDLE UniqueProcess;
        HANDLE UniqueThread;
    };
    using PCLIENT_ID = CLIENT_ID*;


    using THREADINFOCLASS = enum _THREADINFOCLASS
    {
        ThreadImpersonationToken = 5,
        ThreadIsIoPending = 16,
        ThreadNameInformation = 38
    };


    using  MEMORY_CACHING_TYPE = enum _MEMORY_CACHING_TYPE 
    {
        MmNonCached,
        MmCached,
        MmWriteCombined,
        MmHardwareCoherentCached,
        MmNonCachedUnordered,
        MmUSWCCached,
        MmMaximumCacheType,
        MmNotMapped
    };

    
    using RTLP_CURDIR_REF = struct _RTLP_CURDIR_REF
    {
        LONG RefCount;
        HANDLE Handle;
    };
    using PRTLP_CURDIR_REF = RTLP_CURDIR_REF*;

    using RTL_RELATIVE_NAME_U = struct _RTL_RELATIVE_NAME_U
    {
        UNICODE_STRING RelativeName;
        HANDLE ContainingDirectory;
        PRTLP_CURDIR_REF CurDirRef;
    };
    using PRTL_RELATIVE_NAME_U = RTL_RELATIVE_NAME_U*;

#endif // !FRAMEWORK_HPP